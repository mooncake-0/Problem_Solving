그린은 유치원생인 레드와 블루에게 수학을 가르치고 있다. 그린은 수학을 더 재밌게 배울 수 있도록 둘에게 간단한 게임을 시켰는데,
어떤 정수를 하나 고르면 레드와 블루가 계산 결과가 그 정수가 나오도록 계산 식을 만드는 것이다. 레드와 블루는 아직 수학에 대해 그렇게 잘 알지는 못하기 때문에,
둘이 만든 식은 모두 다음의 조건을 만족한다.

덧셈(+), 뺄셈(-) 이외의 연산자는 등장하지 않는다.
음수나 억 이상의 단위를 알지 못하기 때문에, 계산 식에 등장하는 모든 수는 0 이상 10^8 미만의 정수이다.
계산 식을 앞에서부터 차례대로 계산할 때, 계산 과정에서 나타나는 모든 수도 0 이상 10^8 미만의 정수이다. 물론 계산을 모두 끝냈을 때 나오는 수도 포함한다.
예를 들어 "1+2+3"의 계산 과정에서 나타나는 수는 1, 3, 6 이다.
계산 식에 등장하는 모든 수는 앞에 불필요한 0 (leading zero)를 포함하지 않는다. 즉, 수가 0으로 시작하는 경우는 오직 0밖에 없다.
식에는 최소 하나의 숫자가 포함되어 있다. 연산자(+ 혹은 -)는 포함되어있지 않을 수 있다.
둘이 만든 식의 계산 결과는 동일하다.


그린은 둘이 게임을 할 때 말한 식을 종이에 받아 적었다.
문제는 레드와 블루가 동시에 말하는 식을 둘의 목소리가 비슷하여 구분할 수 없다는 것이다.
따라서 그린이 받아 적은 식은 두 식이 뒤섞여 버렸다. 하지만 한 사람의 식 내의 순서가 뒤섞이진 않았다.


예를 들어 레드의 식이 "1+2"이고, 블루의 식이 "6-3"이면
"16-+23", "1+26-3" 등으로 받아적을 수 있다. 하지만
"2+16-3"은 불가능한데, 레드는 1보다 2를 먼저 말했기 때문이다.

그린은 받아 적은 문자열 S를 보고 레드와 블루가 어떤 식을 말했는지 궁금해졌다.
하지만 그 경우의 수가 꽤 많을 수 있다는 것을 깨달았다. 그린을 위해 주어진 문자열의 서로 다른 해석이 몇 가지인지 구해보자.

여기서 어떤 두 해석이 다르다는 것은, 주어진 문자열에서 한 글자라도 다른 사람이 말했다는 것을 의미한다
. 따라서 만들어진 식들이 동일하게 보여도, 여러 해석이 가능할 수도 있다. (예제 2 참고).

# 한 숫자열을 두 집합이 나눠가질 수 있는 경우의 수
# n 개를 둘이서 나눠갖는 경우의 수는
# nC1 + ... nCn
def divide_chunk(chunk):